/* 
 *  Voyage
 *
 *  Voyage is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Wed May 20 17:30:41 2009.
 **********************************************************************************
 *  Copyright 2008
 *
 */

#ifndef __VOYAGE_H__
#define __VOYAGE_H__

#include <QtCore>

class Voyage : public QObject { 
    Q_OBJECT

public:
    Voyage();
    Voyage(const Voyage&);
    Voyage & operator=(const Voyage&/*val*/);

    /* Id:
       The identification of this voyage */
    void setId(QString val);
    QString getId() const;

    /* SourceName:
       Identification of the originator of this data */
    void setSourceName(QString val);
    QString getSourceName() const;

    /* Source:
       Source/originator type: 1 = transponder 2 = database 3 = manual */
    void setSource(int val);
    int getSource() const;

    /* CargoType:
       0 = All ships of this type
       1 = Carrying DG, HS, or MP, IMO hazard or pollutant category A
       2 = Carrying DG, HS, or MP, IMO hazard or pollutant category B
       3 = Carrying DG, HS, or MP, IMO hazard or pollutant category C
       4 = Carrying DG, HS, or MP, IMO hazard or pollutant category D
       9 = No additional information */
    void setCargoType(int val);
    int getCargoType() const;
    bool hasCargoType();

    /* Destination:
       Destination of the target */
    void setDestination(QString val);
    QString getDestination() const;
    bool hasDestination();

    /* ETA:
       Date and time in ISO 8601 UTC format (YYYY-MM-DDThh:mm:ss.sss) of the Expected Time Of Arrival of the target. */
    void setETA(QDateTime val);
    QDateTime getETA() const;
    bool hasETA();

    /* ATA:
       Date and time in ISO 8601 UTC format (YYYY-MM-DDThh:mm:ss.sss) of the Actual Time Of Arrival of the target. */
    void setATA(QDateTime val);
    QDateTime getATA() const;
    bool hasATA();

    /* AirDraught:
       Actual air draught of the vessel in meters */
    void setAirDraught(float val);
    float getAirDraught() const;
    bool hasAirDraught();

    /* Draught:
       Actual draught of the vessel in meters */
    void setDraught(float val);
    float getDraught() const;
    bool hasDraught();
    QString toXML();
    QString toString(QString lead);
    QString encode(QString str);

private:
    QString m_id;
    QString m_sourceName;
    int m_source;
    int m_cargoType;
    bool m_cargoTypePresent;
    QString m_destination;
    bool m_destinationPresent;
    QDateTime m_ETA;
    bool m_ETAPresent;
    QDateTime m_ATA;
    bool m_ATAPresent;
    float m_airDraught;
    bool m_airDraughtPresent;
    float m_draught;
    bool m_draughtPresent;

}; 

#endif

